import { AdminUserUpdate } from "../interfaces/AdminUserUpdate";
import { UserFullProps } from "../interfaces/UserFullProps";
import { UserResponseDTO } from "../interfaces/UserResponseDTO";
import { UserUpdateDTO } from "../interfaces/UserUpdateDTO";
import api from "./axiosConfig";

/**
 * L·∫•y danh s√°ch t·∫•t c·∫£ ng∆∞·ªùi d√πng (ch·ªâ d√πng cho admin).
 */
export const getAllUsers = async (): Promise<UserFullProps[]> => {
  try {
    const res = await api.get<UserFullProps[]>("/api/users");
    return res.data;
  } catch (error) {
    console.error("‚ùå Failed to fetch all users:", error);
    throw error;
  }
};

/**
 * L·∫•y profile c·ªßa user ƒëang ƒëƒÉng nh·∫≠p.
 */
export const getMyProfile = async (): Promise<UserResponseDTO> => {
  try {
    const res = await api.get<UserResponseDTO>("/api/auth/me");
    return res.data;
  } catch (error) {
    console.error("‚ùå Failed to fetch profile:", error);
    throw error;
  }
};

/**
 * Ng∆∞·ªùi d√πng t·ª± c·∫≠p nh·∫≠t profile c√° nh√¢n.
 */
export const updateMyProfile = async (
  data: UserUpdateDTO
): Promise<UserResponseDTO> => {
  try {
    const me = await getMyProfile();
    const res = await api.put<UserResponseDTO>(`/api/users/${me.id}`, data);
    return res.data;
  } catch (error) {
    console.error("‚ùå Failed to update profile:", error);
    throw error;
  }
};

/**
 * Admin c·∫≠p nh·∫≠t th√¥ng tin c·ªßa m·ªôt ng∆∞·ªùi d√πng b·∫•t k·ª≥.
 */
export const updateUserByAdmin = async (
  id: number,
  data: AdminUserUpdate
): Promise<UserFullProps> => {
  try {
    const res = await api.put<UserFullProps>(`/api/users/admin/${id}`, data); // üëà l∆∞u √Ω path d√†nh ri√™ng cho admin
    return res.data;
  } catch (error) {
    console.error("‚ùå Failed to update user by admin:", error);
    throw error;
  }
};

/**
 * Admin xo√° ng∆∞·ªùi d√πng b·∫•t k·ª≥ theo ID.
 */
export const deleteUserByAdmin = async (id: number): Promise<void> => {
  try {
    await api.delete(`/api/users/${id}`);
  } catch (error) {
    console.error(`‚ùå Failed to delete user with ID ${id}:`, error);
    throw error;
  }
};

/**
 * T√¨m ki·∫øm ng∆∞·ªùi d√πng theo username ho·∫∑c s·ªë ƒëi·ªán tho·∫°i.
 */
export const searchUser = async (
  query: string
): Promise<UserResponseDTO | null> => {
  try {
    const response = await api.get("/api/users/search", {
      params: { query },
    });
    return response.data;
  } catch (error) {
    console.warn("‚ö†Ô∏è User not found or search failed:", error);
    return null;
  }
};
