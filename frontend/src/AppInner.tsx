// AppInner.tsx

import { useEffect } from "react";
import { useUser } from "./hooks/useUser";
import { ACCESS_TOKEN_KEY } from "./constants/storageKeys";
import { defaultUser } from "./interfaces/User";
import { useNavigate } from "react-router-dom";
import { isTokenValid } from "./utils/auth";
import { getCurrentUser } from "./api/authApi";
import AppRoutes from "./routes/AppRoutes";

/**
 * AppInner l√† component trung t√¢m c·ªßa ·ª©ng d·ª•ng (b√™n trong UserProvider).
 * Tr√°ch nhi·ªám:
 * - Ki·ªÉm tra xem c√≥ token trong localStorage kh√¥ng
 * - N·∫øu token h·ª£p l·ªá ‚Üí g·ªçi API /me ƒë·ªÉ x√°c th·ª±c v√† set user
 * - N·∫øu kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng c√≥ ‚Üí reset user v√† ƒëi·ªÅu h∆∞·ªõng v·ªÅ /login
 * - N·∫øu ƒëang ·ªü "/" ‚Üí t·ª± ƒë·ªông ƒëi·ªÅu h∆∞·ªõng t·ªõi /home ho·∫∑c /login t√πy tr·∫°ng th√°i
 */
export default function AppInner() {
  const { setUser, setLoading } = useUser();
  const navigate = useNavigate();

  useEffect(() => {
    const token = localStorage.getItem(ACCESS_TOKEN_KEY);
    console.log("üîç AppInner mounted");
    console.log("ü™™ L·∫•y token t·ª´ localStorage:", token);

    // D√πng ƒë·ªÉ k·∫øt th√∫c tr·∫°ng th√°i loading sau b·∫•t k·ª≥ nh√°nh n√†o
    const finish = () => setLoading(false);

    // ‚ùå N·∫øu kh√¥ng c√≥ token
    if (!token) {
      console.warn("üö´ Kh√¥ng c√≥ token");
      setUser(defaultUser);
      if (window.location.pathname === "/") {
        console.log("‚û°Ô∏è Redirect / ‚Üí /login");
        navigate("/login", { replace: true });
      }
      return finish();
    }

    // ‚ùå N·∫øu token h·∫øt h·∫°n ho·∫∑c kh√¥ng h·ª£p l·ªá
    const decoded = isTokenValid(token);
    if (!decoded) {
      console.warn("‚õî Token kh√¥ng h·ª£p l·ªá ho·∫∑c h·∫øt h·∫°n");
      localStorage.removeItem(ACCESS_TOKEN_KEY);
      setUser(defaultUser);
      if (window.location.pathname === "/") {
        console.log("‚û°Ô∏è Redirect / ‚Üí /login");
        navigate("/login", { replace: true });
      }
      return finish();
    }

    // ‚úÖ N·∫øu token h·ª£p l·ªá ‚Üí x√°c th·ª±c v·ªõi backend b·∫±ng API /me
    const checkToken = async () => {
      try {
        console.log("üîÑ G·ªçi API: /me");
        const user = await getCurrentUser();
        console.log("‚úÖ /me OK:", user);
        setUser(user);

        if (window.location.pathname === "/") {
          console.log("‚û°Ô∏è Redirect / ‚Üí /home");
          navigate("/home", { replace: true });
        }
      } catch (err) {
        console.error("‚ùå L·ªói x√°c th·ª±c token v·ªõi server:", err);
        localStorage.removeItem(ACCESS_TOKEN_KEY);
        setUser(defaultUser);
        if (window.location.pathname === "/") {
          console.log("‚û°Ô∏è Redirect / ‚Üí /login");
          navigate("/login", { replace: true });
        }
      } finally {
        finish();
      }
    };

    checkToken();
  }, [navigate, setUser, setLoading]);

  return <AppRoutes />;
}
